# Released under the MIT License. See LICENSE for details.
#
"""A dummy stub module for the real _baclassic.

The real _baclassic is a compiled extension module and only available
in the live engine. This dummy-module allows Pylint/Mypy/etc. to
function reasonably well outside of that environment.

Make sure this file is never included in dirs seen by the engine!

In the future perhaps this can be a stub (.pyi) file, but we will need
to make sure that it works with all our tools (mypy, pylint, pycharm).

NOTE: This file was autogenerated by batools.dummymodule; do not edit by hand.
"""

# I'm sorry Pylint. I know this file saddens you. Be strong.
# pylint: disable=useless-suppression
# pylint: disable=unnecessary-pass
# pylint: disable=use-dict-literal
# pylint: disable=use-list-literal
# pylint: disable=unused-argument
# pylint: disable=missing-docstring
# pylint: disable=too-many-locals
# pylint: disable=redefined-builtin
# pylint: disable=too-many-lines
# pylint: disable=redefined-outer-name
# pylint: disable=invalid-name
# pylint: disable=no-value-for-parameter
# pylint: disable=unused-import
# pylint: disable=too-many-positional-arguments

from __future__ import annotations

from typing import TYPE_CHECKING, override

if TYPE_CHECKING:
    from typing import Any, Callable


def _uninferrable() -> Any:
    """Get an "Any" in mypy and "uninferrable" in Pylint."""
    # pylint: disable=undefined-variable
    return _not_a_real_variable  # type: ignore


def animate_root_ui_chest_unlock_time(
    *,
    chestid: str,
    duration: float,
    startvalue: float,
    endvalue: float,
) -> None:
    """Animate the unlock time on a chest."""
    # This is a dummy stub; the actual implementation is native code.
    return None


def animate_root_ui_tickets(
    *,
    duration: float,
    startvalue: int,
    endvalue: int,
) -> None:
    """Animate the displayed tickets value."""
    # This is a dummy stub; the actual implementation is native code.
    return None


def animate_root_ui_tokens(
    *,
    duration: float,
    startvalue: int,
    endvalue: int,
) -> None:
    """Animate the displayed tokens value."""
    # This is a dummy stub; the actual implementation is native code.
    return None


def classic_app_mode_activate() -> None:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return None


def classic_app_mode_deactivate() -> None:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return None


def classic_app_mode_handle_app_intent_default() -> None:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return None


def classic_app_mode_handle_app_intent_exec(command: str) -> None:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return None


def get_account_display_state() -> Any:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return _uninferrable()


def set_account_display_state(vals: dict) -> None:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return None


def set_have_live_account_values(have: bool) -> None:
    """Inform the native layer whether we are being fed with live account
    values from the server.
    """
    # This is a dummy stub; the actual implementation is native code.
    return None


def set_root_ui_account_values(
    *,
    tickets: int,
    tokens: int,
    league_type: str,
    league_number: int,
    league_rank: int,
    achievements_percent_text: str,
    level_text: str,
    xp_text: str,
    inbox_count: int,
    inbox_count_is_max: bool,
    inbox_announce_text: str,
    gold_pass: bool,
    chest_0_appearance: str,
    chest_1_appearance: str,
    chest_2_appearance: str,
    chest_3_appearance: str,
    chest_0_create_time: float,
    chest_1_create_time: float,
    chest_2_create_time: float,
    chest_3_create_time: float,
    chest_0_unlock_time: float,
    chest_1_unlock_time: float,
    chest_2_unlock_time: float,
    chest_3_unlock_time: float,
    chest_0_unlock_tokens: int,
    chest_1_unlock_tokens: int,
    chest_2_unlock_tokens: int,
    chest_3_unlock_tokens: int,
    chest_0_ad_allow_time: float,
    chest_1_ad_allow_time: float,
    chest_2_ad_allow_time: float,
    chest_3_ad_allow_time: float,
) -> None:
    """Pass values to the native layer for use in the root UI or elsewhere."""
    # This is a dummy stub; the actual implementation is native code.
    return None


def set_stress_testing(
    testing: bool, player_count: int, attract_mode: bool
) -> None:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return None


def value_test(
    arg: str, change: float | None = None, absolute: float | None = None
) -> float:
    """(internal)"""
    # This is a dummy stub; the actual implementation is native code.
    return float()
